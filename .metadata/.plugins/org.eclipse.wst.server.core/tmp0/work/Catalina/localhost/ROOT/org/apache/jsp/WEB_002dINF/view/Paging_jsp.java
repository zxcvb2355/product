/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.82
 * Generated at: 2023-02-09 02:48:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import main.a.b.common.NumUtils;

public final class Paging_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.apache.log4j.Logger");
    _jspx_imports_classes.add("java.util.Collection");
    _jspx_imports_classes.add("org.apache.log4j.LogManager");
    _jspx_imports_classes.add("main.a.b.common.NumUtils");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	Logger logger = LogManager.getLogger(this.getClass());
	logger.info("paging 진입");
	
	String url = null;
	String str = null;
	String val = null;
	String vl = "val=";
	String minPay = "";
	String maxPay = "";
	String pcategory = "";
	String pcategory_detail = "";
	String detail_product = "";
	String mintest = "";
	String maxtest = "";
	
	url = request.getParameter("url");
	logger.info(url);
	
	str = request.getParameter("str");
	logger.info(str);
	
	val = request.getParameter("val");
	logger.info("val : " + val);
	
	if(request.getParameter("minPay") != null){
		minPay = request.getParameter("minPay");
		logger.info(request.getParameter("minPay"));
		logger.info("minPay : " + minPay);
	}
	
	
		maxPay = request.getParameter("maxPay");
		logger.info("maxPay : " + maxPay);

		
	if(request.getParameter("pcategory") != null){	
		pcategory = request.getParameter("pcategory");
	}
		
	
	if(request.getParameter("pcategory_detail") != null){
		pcategory_detail = request.getParameter("pcategory_detail");
	}
	
	
	if(request.getParameter("detail_product")!=null){
		detail_product = request.getParameter("detail_product");
	}
	
	
	if(str != null){
		str = str + "&";
		logger.info(str);
		
	}

	
	int rowCount = 0;
	int groupSize = 0;
	int nowPage = 0;
	int totalCount = 0;
	int pageCount = 0;
	
	
	
	
	if(request.getParameter("rowCount")!= null){
		rowCount = Integer.parseInt(request.getParameter("rowCount"));
		logger.info(rowCount);
	}

	if(request.getParameter("groupSize") != null){
		groupSize = Integer.parseInt(request.getParameter("groupSize"));
		logger.info(groupSize);
	}

	if(request.getParameter("nowPage")!= null){
		nowPage = Integer.parseInt(request.getParameter("nowPage"));
		logger.info(nowPage);
	}

	if(request.getParameter("totalCount") != null){
		totalCount = Integer.parseInt(request.getParameter("totalCount"));
		logger.info("전체 글갯수 totalCount : " + totalCount);
	}
	
	pageCount = (int)Math.ceil(totalCount / (rowCount + 0.0));
	logger.info(pageCount);
	
	int curGroup = (nowPage-1) / groupSize;
	logger.info(curGroup);
	
	int linkPage = curGroup * groupSize;
	logger.info("linkPage : " + linkPage);
	int nowpa = linkPage;
	



      out.write("    	\r\n");
      out.write("	<p align=\"right\">\r\n");
      out.write("	\r\n");

	if(curGroup > 0){

	//boardSelectList.jsp&curPage=1
	//boardSelectList.jsp&curPage=0		

      out.write("	\r\n");
      out.write("	<!-- 쿼리스트링 날릴려고 작성한 곳 -->\r\n");
      out.write("	<div align=\"center\">\r\n");
      out.write("	<ul id=\"block\">\r\n");
      out.write("			<li class=\"link\">\r\n");
      out.write("				<a href=\"javascript:void(0)\" onClick=\"javascript:goPost(");
      out.print(linkPage);
      out.write(")\" class=\"hi\">&lt;</a>\r\n");
      out.write("			</li>\r\n");
		
	}else{

      out.write("	\r\n");
      out.write(" 	<div align=\"center\">\r\n");
      out.write("	<ul id=\"block\">\r\n");
      out.write("			<li class=\"link\">\r\n");
      out.write("				<span class=\"hi\">&lt;</span>\r\n");
      out.write("			</li>\r\n");

	} 
	//다음 링크를 위해 증가시킴
	linkPage++;
	logger.info("증가된 linkPage : " + linkPage);
			//groupSize 5 그래서 5
	int loopCount = groupSize;
	logger.info("loopCount : " + loopCount);
	
	//그룹범위내에서 페이지 링크만듬
	//5>0 && 1<=40
	while((loopCount > 0) && (linkPage <= pageCount)){
				//5            6  <=29
		//6 == 6
	if(linkPage == nowPage){
		logger.info("그룹범위내에서 페이지 링크if");

      out.write("	\r\n");
      out.write("	<li class=\"link\">\r\n");
      out.write("	<a href=\"javascript:void(0)\" onClick=\"javascript:goPost(");
      out.print(linkPage);
      out.write(")\" class=\"hello\">");
      out.print(linkPage);
      out.write("</a>\r\n");
      out.write("	</li>\r\n");
      out.write("\r\n");
 			
	}else{
		logger.info("그룹범위내에서 페이지 링크 else");
		logger.info("linkPage 값 증가 : " + linkPage);

      out.write("\r\n");
      out.write("	<li class=\"link\">\r\n");
      out.write("				<a href=\"javascript:void(0)\" onClick=\"javascript:goPost(");
      out.print(linkPage);
      out.write(")\" class=\"hi\" id=\"nowpa\">");
      out.print(linkPage);
      out.write("</a>\r\n");
      out.write("			</li>\r\n");
 	
	}
	
	linkPage++;
	loopCount--;
	}
	
	//다음그룹이 있는 경우
	//  6  40
	//중간의 경우 
	if(linkPage <= pageCount) {
		logger.info("다음그룹이 있는경우 linkPage : " + linkPage);
		logger.info("다음그룹이 있는 경우 pageCount : " + pageCount);
		
		//boardSelectList.jsp?&curPage=6
		//boardSelectList.jsp?&curPage=40		

      out.write("\r\n");
      out.write("<li class=\"link\">\r\n");
      out.write("			<a href=\"javascript:void(0)\" onClick=\"javascript:goPost(");
      out.print(linkPage);
      out.write(")\" class=\"hi\">&gt;</a>\r\n");
      out.write("		</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("		</div>\r\n");
 	
	//마지막 페이지의 경우
	}else{
		

      out.write("	\r\n");
      out.write("	<li class=\"link\">\r\n");
      out.write("			<span class=\"hi\">&gt;</span>\r\n");
      out.write("		</li>\r\n");
      out.write("		</ul>\r\n");
      out.write("		</div> \r\n");
 
	}
	

      out.write("\r\n");
      out.write("</p>\r\n");
      out.write("	 	\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
